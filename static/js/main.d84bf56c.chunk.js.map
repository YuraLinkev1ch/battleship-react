{"version":3,"sources":["components/Footer.tsx","components/Header.tsx","factories/Ship.ts","factories/Gameboard.ts","factories/Player.ts","components/Game/Board.tsx","components/elements/Button.tsx","components/Game/EndScreen.tsx","components/Game/StartScreen.tsx","components/Game/Game.tsx","components/Main.tsx","App.tsx","theme/Theme.ts","theme/GlobalStyle.ts","index.tsx"],"names":["FooterWrapper","styled","footer","theme","padding","sm","GithubLink","a","colors","dark","primary","Footer","href","target","rel","HeaderWrapper","header","lg","Header","Ship","length","hits","this","position","includes","push","SIZE","Gameboard","board","missedShots","initialize","i","j","ship","row","column","isVertical","isPlacementPossible","isEmpty","ships","carrier","battleship","destroyer","submarine","patrolBoat","succesfulPlacements","Math","floor","random","placeShip","x","y","hitIndex","hit","isBoardEmpty","isSunk","result","Player","name","alreadyHitCoords","positionX","positionY","gameboard","hasAlreadyHit","receiveAttack","BoardWrapper","div","Field","status","css","light","owner","secondary","green","red","Board","enemy","onFieldClick","fields","fieldComponent","onClick","uuidv4","loadFields","ButtonWrapper","button","md","borderRadius","Button","content","EndScreenWrapper","EndMessage","Overlay","EndScreen","message","resetGame","StartScreenWrapper","SetupWindow","isFilled","FieldHover","shipLength","StartScreen","setUserGameboard","setHasGameStarted","shipNames","useState","currentIndex","setCurrentIndex","currentShipName","setCurrentShipName","currentShip","setCurrentShip","setIsVertical","gameboardCopy","Object","assign","create","getPrototypeOf","GameWrapper","Boards","Game","user","setUser","userGameboard","computer","setComputer","computerGameboard","setComputerGameboard","hasGameStarted","isGameOver","setIsGameOver","endScreenMessage","setEndScreenMessage","useEffect","setupComputerGameboard","placeShipsRandomly","userCopy","computerCopy","userGameboardCopy","computerGameboardCopy","attack","randomAttack","MainWrapper","main","Main","App","Theme","width","GlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d84bf56c.chunk.js","sourcesContent":["import styled from 'styled-components'\nimport { FaGithub } from 'react-icons/fa'\n\nconst Footer = () => {\n  return (\n    <FooterWrapper>\n      Copyright © 2021 Yura Linkevich\n      <GithubLink\n        href=\"https://github.com/YuraLinkev1ch\"\n        target=\"_blank\"\n        rel=\"noopener\"\n      >\n        <FaGithub />\n      </GithubLink>\n    </FooterWrapper>\n  )\n}\n\nconst FooterWrapper = styled.footer`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding: ${({ theme }) => theme.padding.sm};\n  font-size: 2.4rem;\n`\n\nconst GithubLink = styled.a`\n  display: flex;\n  margin-left: 1rem;\n  color: ${({ theme }) => theme.colors.dark.primary};\n  transition: transform 0.15s ease-in-out;\n\n  &:hover {\n    transform: scale(1.2);\n  }\n`\n\nexport default Footer\n","import styled from 'styled-components'\n\nconst Header = () => {\n  return <HeaderWrapper>BATTLESHIP</HeaderWrapper>\n}\n\nconst HeaderWrapper = styled.header`\n  padding: ${({ theme }) => theme.padding.lg};\n  font-family: 'Big Shoulders Stencil Text', cursive;\n  font-size: 12rem;\n  font-weight: 900;\n  letter-spacing: 1rem;\n  line-height: 1;\n  text-align: center;\n\n  @media (max-width: 768px) {\n    font-size: 7rem;\n  }\n`\n\nexport default Header\n","class Ship {\n  length: number\n  hits: number[]\n\n  constructor(length: number) {\n    this.length = length\n    this.hits = []\n  }\n\n  hit(position: number) {\n    if (this.hits.includes(position) || position < 0 || position >= this.length)\n      return\n    this.hits.push(position)\n  }\n\n  isSunk() {\n    return this.hits.length === this.length\n  }\n}\n\nexport default Ship\n","import Ship from './Ship'\n\nconst SIZE = 10\n\nclass Gameboard {\n  board: Ship[][]\n  missedShots: boolean[][]\n\n  constructor() {\n    this.board = []\n    this.missedShots = []\n    this.initialize()\n  }\n\n  initialize() {\n    for (let i = 0; i < SIZE; i++) {\n      this.board[i] = []\n      this.missedShots[i] = []\n      for (let j = 0; j < SIZE; j++) {\n        this.board[i][j] = null\n        this.missedShots[i][j] = false\n      }\n    }\n  }\n\n  placeShip(ship: Ship, row: number, column: number, isVertical: boolean) {\n    if (!this.isPlacementPossible(ship, row, column, isVertical)) return false\n\n    if (isVertical) {\n      for (let i = 0; i < ship.length; i++) {\n        this.board[row + i][column] = ship\n      }\n    } else {\n      for (let i = 0; i < ship.length; i++) {\n        this.board[row][column + i] = ship\n      }\n    }\n    return true\n  }\n\n  placeShipsRandomly() {\n    if (!this.isEmpty()) return\n\n    const ships = []\n    const carrier = new Ship(5)\n    const battleship = new Ship(4)\n    const destroyer = new Ship(3)\n    const submarine = new Ship(3)\n    const patrolBoat = new Ship(2)\n    ships.push(carrier, battleship, destroyer, submarine, patrolBoat)\n\n    let succesfulPlacements = 0\n\n    while (succesfulPlacements < 5) {\n      const row = Math.floor(Math.random() * 10)\n      const column = Math.floor(Math.random() * 10)\n      const isVertical = Math.floor(Math.random() * 2) === 1 ? true : false\n\n      if (this.placeShip(ships[succesfulPlacements], row, column, isVertical))\n        succesfulPlacements++\n    }\n  }\n\n  isPlacementPossible(\n    ship: Ship,\n    row: number,\n    column: number,\n    isVertical: boolean\n  ) {\n    // case position is out of gameboard\n    if (row < 0 || row > SIZE - 1 || column < 0 || column > SIZE - 1)\n      return false\n\n    // case ship doesn't fit in gameboard\n    if (isVertical) {\n      if (row + ship.length > SIZE) return false\n    } else {\n      if (column + ship.length > SIZE) return false\n    }\n\n    // case any of the fields is already taken\n    if (isVertical) {\n      for (let i = 0; i < ship.length; i++) {\n        if (this.board[row + i][column]) return false\n      }\n    } else {\n      for (let i = 0; i < ship.length; i++) {\n        if (this.board[row][column + i]) return false\n      }\n    }\n\n    // case any of the neighbour fields are already taken\n    if (isVertical) {\n      for (let i = 0; i < ship.length; i++) {\n        for (let x = -1; x <= 1; x++) {\n          for (let y = -1; y <= 1; y++) {\n            if (\n              row + x + i < 0 ||\n              row + x + i >= SIZE ||\n              column + y < 0 ||\n              column + y >= SIZE\n            )\n              continue\n            if (this.board[row + x + i][column + y]) return false\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i < ship.length; i++) {\n        for (let x = -1; x <= 1; x++) {\n          for (let y = -1; y <= 1; y++) {\n            if (\n              row + x < 0 ||\n              row + x >= SIZE ||\n              column + y + i < 0 ||\n              column + y + i >= SIZE\n            )\n              continue\n            if (this.board[row + x][column + y + i]) return false\n          }\n        }\n      }\n    }\n    return true\n  }\n\n  receiveAttack(row: number, column: number) {\n    if (row < 0 || row >= SIZE || column < 0 || column >= SIZE) {\n      return false\n    }\n\n    if (this.board[row][column]) {\n      let hitIndex = 0\n      // is vertical\n      if (column > 0 && this.board[row][column - 1]) {\n        let i = 1\n        while (column - i >= 0 && this.board[row][column - i]) {\n          hitIndex++\n          i++\n        }\n      }\n      // is horizontal\n      else if (row > 0 && this.board[row - 1][column]) {\n        let i = 1\n        while (row - i >= 0 && this.board[row - i][column]) {\n          hitIndex++\n          i++\n        }\n      }\n      this.board[row][column].hit(hitIndex)\n      return true\n    } else {\n      this.missedShots[row][column] = true\n      return false\n    }\n  }\n\n  isGameOver() {\n    let isBoardEmpty = true\n    for (let i = 0; i < SIZE; i++) {\n      for (let j = 0; j < SIZE; j++) {\n        if (this.board[i][j]) {\n          isBoardEmpty = false\n          if (!this.board[i][j].isSunk()) {\n            return false\n          }\n        }\n      }\n    }\n    return isBoardEmpty ? false : true\n  }\n\n  isEmpty() {\n    for (let i = 0; i < SIZE; i++) {\n      for (let j = 0; j < SIZE; j++) {\n        if (this.board[i][j] !== null) return false\n      }\n    }\n    return true\n  }\n\n  getEmptyFieldsAmount() {\n    let result = 0\n    for (let i = 0; i < SIZE; i++) {\n      for (let j = 0; j < SIZE; j++) {\n        if (this.board[i][j] === null) result++\n      }\n    }\n    return result\n  }\n}\n\nexport default Gameboard\n","import Gameboard from './Gameboard'\n\nclass Player {\n  name: string\n  alreadyHitCoords: number[][]\n\n  constructor(name: string) {\n    this.name = name\n    this.alreadyHitCoords = []\n  }\n\n  attack(positionX: number, positionY: number, gameboard: Gameboard) {\n    if (this.hasAlreadyHit(positionX, positionY)) return\n\n    this.alreadyHitCoords.push([positionX, positionY])\n    gameboard.receiveAttack(positionX, positionY)\n  }\n\n  randomAttack(gameboard: Gameboard) {\n    if (this.alreadyHitCoords.length === 100) return\n\n    let positionX = Math.floor(Math.random() * 10)\n    let positionY = Math.floor(Math.random() * 10)\n\n    while (this.hasAlreadyHit(positionX, positionY)) {\n      positionX = Math.floor(Math.random() * 10)\n      positionY = Math.floor(Math.random() * 10)\n    }\n\n    this.alreadyHitCoords.push([positionX, positionY])\n    gameboard.receiveAttack(positionX, positionY)\n  }\n\n  hasAlreadyHit(positionX: number, positionY: number) {\n    for (let i = 0; i < this.alreadyHitCoords.length; i++) {\n      if (\n        this.alreadyHitCoords[i][0] === positionX &&\n        this.alreadyHitCoords[i][1] === positionY\n      ) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\nexport default Player\n","import styled, { css } from 'styled-components'\nimport Gameboard from '../../factories/Gameboard'\nimport Player from '../../factories/Player'\nimport { v4 as uuidv4 } from 'uuid'\n\ninterface Props {\n  gameboard: Gameboard\n  owner: Player\n  enemy: Player\n  onFieldClick?: (positionX: number, positionY: number) => void\n}\n\nconst Board = ({ gameboard, owner, enemy, onFieldClick }: Props) => {\n  const loadFields = () => {\n    const fields = []\n    for (let row = 0; row < gameboard.board.length; row++) {\n      for (let column = 0; column < gameboard.board[row].length; column++) {\n        const field = gameboard.board[row][column]\n        let status = 'default'\n        if (field) {\n          if (owner.name !== 'Computer') status = 'ship'\n          if (enemy.hasAlreadyHit(row, column)) status = 'hit'\n        } else {\n          if (gameboard.missedShots[row][column]) status = 'missed'\n        }\n\n        let fieldComponent = <Field></Field>\n        if (owner.name === 'Computer') {\n          fieldComponent = (\n            <Field\n              key={uuidv4()}\n              status={status}\n              owner={owner}\n              onClick={() => onFieldClick(row, column)}\n            />\n          )\n        } else {\n          fieldComponent = (\n            <Field key={uuidv4()} status={status} owner={owner} />\n          )\n        }\n        fields.push(fieldComponent)\n      }\n    }\n    return fields\n  }\n\n  return <BoardWrapper>{loadFields()}</BoardWrapper>\n}\n\nconst BoardWrapper = styled.div`\n  display: grid;\n  width: 40rem;\n  height: 40rem;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  border: 1px solid ${({ theme }) => theme.colors.dark.primary};\n`\n\ninterface IField {\n  status?: string\n  owner?: Player\n}\n\nconst Field = styled.div<IField>`\n  border: 1px solid ${({ theme }) => theme.colors.dark.primary};\n\n  ${({ status }) =>\n    status === 'default' &&\n    css`\n      background-color: ${({ theme }) => theme.colors.light.primary};\n\n      ${({ owner }: IField) =>\n        owner.name === 'Computer' &&\n        css`\n          cursor: pointer;\n\n          &:hover {\n            background-color: ${({ theme }) => theme.colors.light.secondary};\n          }\n        `}\n    `}\n\n  ${({ status }) =>\n    status === 'ship' &&\n    css`\n      background-color: ${({ theme }) => theme.colors.dark.secondary};\n    `}\n  \n  ${({ status }) =>\n    status === 'missed' &&\n    css`\n      background-color: ${({ theme }) => theme.colors.green};\n    `}\n\n  ${({ status }) =>\n    status === 'hit' &&\n    css`\n      background-color: ${({ theme }) => theme.colors.red};\n    `}\n`\n\nexport default Board\n","import styled from 'styled-components'\n\ninterface Props {\n  content: string\n  onClick: () => void\n}\n\nconst Button = ({ content, onClick }: Props) => {\n  return <ButtonWrapper onClick={onClick}>{content}</ButtonWrapper>\n}\n\nconst ButtonWrapper = styled.button`\n  padding: ${({ theme }) => theme.padding.sm} ${({ theme }) => theme.padding.md};\n  border-radius: ${({ theme }) => theme.borderRadius.md};\n  background-color: ${({ theme }) => theme.colors.dark.primary};\n  color: ${({ theme }) => theme.colors.light.primary};\n  transition: transform 0.1s ease-in-out;\n\n  &:hover {\n    transform: scale(1.03);\n  }\n`\n\nexport default Button\n","import styled from 'styled-components'\nimport Button from '../elements/Button'\n\ninterface Props {\n  message: string\n  resetGame: () => void\n}\n\nconst EndScreen = ({ message, resetGame }: Props) => {\n  return (\n    <EndScreenWrapper>\n      <EndMessage>\n        <p>{message}</p>\n        <Button content={'Play again'} onClick={resetGame} />\n      </EndMessage>\n      <Overlay />\n    </EndScreenWrapper>\n  )\n}\n\nconst EndScreenWrapper = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  width: 100%;\n`\n\nconst EndMessage = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n  width: 500px;\n  height: 300px;\n  background-color: ${({ theme }) => theme.colors.light.primary};\n  z-index: 2;\n  padding: ${({ theme }) => theme.padding.md};\n  border-radius: ${({ theme }) => theme.borderRadius.md}; ;\n`\n\nconst Overlay = styled.div`\n  position: absolute;\n  z-index: 1;\n  top: 0;\n  right: 0;\n  height: 100%;\n  width: 100%;\n  background-color: black;\n  opacity: 0.6;\n`\n\nexport default EndScreen\n","import { useState } from 'react'\nimport styled, { css } from 'styled-components'\nimport Gameboard from '../../factories/Gameboard'\nimport Ship from '../../factories/Ship'\nimport Button from '../elements/Button'\nimport { v4 as uuidv4 } from 'uuid'\n\ninterface Props {\n  gameboard: Gameboard\n  setUserGameboard: (gameBoard: Gameboard) => void\n  setHasGameStarted: (hasGameStarted: boolean) => void\n}\n\nconst StartScreen = ({\n  gameboard,\n  setUserGameboard,\n  setHasGameStarted,\n}: Props) => {\n  const ships = [\n    new Ship(5),\n    new Ship(4),\n    new Ship(3),\n    new Ship(3),\n    new Ship(2),\n  ]\n\n  const shipNames = [\n    'Carrier',\n    'Battleship',\n    'Destroyer',\n    'Submarine',\n    'Patrol Boat',\n  ]\n\n  const [currentIndex, setCurrentIndex] = useState(0)\n  const [currentShipName, setCurrentShipName] = useState(shipNames[0])\n  const [currentShip, setCurrentShip] = useState(ships[0])\n  const [isVertical, setIsVertical] = useState(false)\n\n  const toggleRotate = () => {\n    setIsVertical(!isVertical)\n  }\n\n  const onFieldClick = (row: number, column: number) => {\n    let gameboardCopy: Gameboard = Object.assign(\n      Object.create(Object.getPrototypeOf(gameboard)),\n      gameboard\n    )\n\n    if (\n      !gameboardCopy.isPlacementPossible(currentShip, row, column, isVertical)\n    ) {\n      return\n    }\n\n    gameboardCopy.placeShip(currentShip, row, column, isVertical)\n    setUserGameboard(gameboardCopy)\n    // currentIndex updates after this method so we need to be 1 step ahead in all operations below\n    setCurrentIndex(currentIndex + 1)\n    setCurrentShip(ships[currentIndex + 1])\n    setCurrentShipName(shipNames[currentIndex + 1])\n\n    if (currentIndex > 3) {\n      setHasGameStarted(true)\n    }\n  }\n\n  const loadFields = () => {\n    const fields = []\n    for (let row = 0; row < gameboard.board.length; row++) {\n      for (let column = 0; column < gameboard.board[row].length; column++) {\n        fields.push(\n          <Field\n            key={uuidv4()}\n            isFilled={gameboard.board[row][column] ? true : false}\n            onClick={() => onFieldClick(row, column)}\n          >\n            <FieldHover\n              shipLength={currentShip.length}\n              isVertical={isVertical}\n            />\n          </Field>\n        )\n      }\n    }\n    return fields\n  }\n\n  return (\n    <StartScreenWrapper>\n      <SetupWindow>\n        <p>\n          <strong>Welcome to battleship game</strong>\n        </p>\n        <p>\n          Place your <u>{currentShipName}</u>\n        </p>\n        <Button content={'Rotate'} onClick={toggleRotate} />\n        <Board>{loadFields()}</Board>\n      </SetupWindow>\n      <Overlay />\n    </StartScreenWrapper>\n  )\n}\n\nconst StartScreenWrapper = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  font-size: 3rem;\n`\n\nconst SetupWindow = styled.div`\n  position: relative;\n  z-index: 2;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n  width: 50rem;\n  height: 80rem;\n  padding: ${({ theme }) => theme.padding.md};\n  background-color: ${({ theme }) => theme.colors.light.secondary};\n`\n\nconst Board = styled.div`\n  display: grid;\n  grid-template-columns: repeat(10, 4rem);\n  grid-template-rows: repeat(10, 4rem);\n  width: 40.2rem;\n  height: 40.2rem;\n  border: 0.1rem solid ${({ theme }) => theme.colors.dark.primary};\n`\n\ninterface IField {\n  isFilled: boolean\n}\n\nconst Field = styled.div<IField>`\n  border: 0.1rem solid ${({ theme }) => theme.colors.dark.primary};\n  cursor: pointer;\n\n  ${({ isFilled }) =>\n    isFilled &&\n    css`\n      background-color: ${({ theme }) => theme.colors.dark.secondary};\n    `}\n`\n\ninterface IFieldHover {\n  shipLength: number\n  isVertical: boolean\n}\n\nconst FieldHover = styled.div<IFieldHover>`\n  position: relative;\n  height: 3.8rem;\n  width: 3.8rem;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.green};\n\n    ${({ isVertical, shipLength }) =>\n      isVertical &&\n      css`\n        height: calc(3.8rem + 4rem * ${shipLength - 1});\n      `}\n\n    ${({ isVertical, shipLength }) =>\n      !isVertical &&\n      css`\n        width: calc(3.8rem + 4rem * ${shipLength - 1}); ;\n      `}\n  }\n`\n\nconst Overlay = styled.div`\n  position: absolute;\n  z-index: 1;\n  top: 0;\n  right: 0;\n  height: 100%;\n  width: 100%;\n  background-color: black;\n  opacity: 0.6;\n`\n\nexport default StartScreen\n","import { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport Gameboard from '../../factories/Gameboard'\nimport Player from '../../factories/Player'\nimport Board from './Board'\nimport EndScreen from './EndScreen'\nimport StartScreen from './StartScreen'\n\nconst Game = () => {\n  const [user, setUser] = useState(new Player('User'))\n  const [userGameboard, setUserGameboard] = useState(new Gameboard())\n  const [computer, setComputer] = useState(new Player('Computer'))\n  const [computerGameboard, setComputerGameboard] = useState(new Gameboard())\n  const [hasGameStarted, setHasGameStarted] = useState(false)\n  const [isGameOver, setIsGameOver] = useState(false)\n  const [endScreenMessage, setEndScreenMessage] = useState('')\n\n  useEffect(() => {\n    setupComputerGameboard()\n  }, [])\n\n  const setupComputerGameboard = () => {\n    const random = new Gameboard()\n    random.placeShipsRandomly()\n    setComputerGameboard(random)\n  }\n\n  const resetGame = () => {\n    setUser(new Player('User'))\n    setUserGameboard(new Gameboard())\n    setComputer(new Player('Computer'))\n    setupComputerGameboard()\n    setHasGameStarted(false)\n    setIsGameOver(false)\n  }\n\n  const handleFieldClick = (positionX: number, positionY: number) => {\n    if (user.hasAlreadyHit(positionX, positionY)) return\n\n    let userCopy: Player = Object.assign(\n      Object.create(Object.getPrototypeOf(user)),\n      user\n    )\n\n    let computerCopy: Player = Object.assign(\n      Object.create(Object.getPrototypeOf(computer)),\n      computer\n    )\n\n    let userGameboardCopy: Gameboard = Object.assign(\n      Object.create(Object.getPrototypeOf(userGameboard)),\n      userGameboard\n    )\n\n    let computerGameboardCopy: Gameboard = Object.assign(\n      Object.create(Object.getPrototypeOf(computerGameboard)),\n      computerGameboard\n    )\n\n    userCopy.attack(positionX, positionY, computerGameboardCopy)\n    setUser(userCopy)\n    setComputerGameboard(computerGameboardCopy)\n    if (computerGameboard.isGameOver()) {\n      setEndScreenMessage('You won')\n      setIsGameOver(true)\n      return\n    }\n\n    computerCopy.randomAttack(userGameboardCopy)\n    setComputer(computerCopy)\n    setUserGameboard(userGameboardCopy)\n    if (userGameboard.isGameOver()) {\n      setEndScreenMessage('Computer won')\n      setIsGameOver(true)\n      return\n    }\n  }\n\n  return (\n    <GameWrapper>\n      {hasGameStarted ? (\n        ''\n      ) : (\n        <StartScreen\n          gameboard={userGameboard}\n          setUserGameboard={setUserGameboard}\n          setHasGameStarted={setHasGameStarted}\n        />\n      )}\n      {isGameOver ? (\n        <EndScreen message={endScreenMessage} resetGame={resetGame} />\n      ) : (\n        ''\n      )}\n      <Boards>\n        <Board gameboard={userGameboard} owner={user} enemy={computer}></Board>\n        <Board\n          gameboard={computerGameboard}\n          owner={computer}\n          enemy={user}\n          onFieldClick={handleFieldClick}\n        ></Board>\n      </Boards>\n    </GameWrapper>\n  )\n}\n\nconst GameWrapper = styled.div`\n  margin-top: 5rem;\n  font-size: 5rem;\n\n  @media (max-width: 768px) {\n    margin-top: 0;\n  }\n`\nconst Boards = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 5rem;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`\n\nexport default Game\n","import styled from 'styled-components'\nimport Game from './Game/Game'\n\nconst Main = () => {\n  return (\n    <MainWrapper>\n      <Game></Game>\n    </MainWrapper>\n  )\n}\n\nconst MainWrapper = styled.main`\n  padding: ${({ theme }) => theme.padding.lg};\n`\n\nexport default Main\n","import Footer from './components/Footer'\nimport Header from './components/Header'\nimport Main from './components/Main'\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Main />\n      <Footer />\n    </>\n  )\n}\n\nexport default App\n","const Theme = {\n  colors: {\n    light: {\n      primary: '#eee',\n      secondary: '#ddd',\n    },\n    dark: {\n      primary: '#222',\n      secondary: '#444',\n    },\n    red: '#ff8585',\n    green: '#85ffb3',\n  },\n  padding: {\n    sm: '1rem',\n    md: '2rem',\n    lg: '4rem',\n  },\n  width: {\n    sm: '500px',\n    md: '1000px',\n    lg: '1500px',\n  },\n  borderRadius: {\n    sm: '5px',\n    md: '10px',\n    lg: '20px',\n  },\n}\n\nexport default Theme\n","import * as styled from 'styled-components'\n\nconst GlobalStyle = styled.createGlobalStyle`\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n  }\n\n  html {\n    font-size: 62.5%;\n    line-height: 1.6;\n    /* Footer support */\n    position: relative;\n    min-height: 100%;\n  }\n\n  body {\n    font-family: 'Poppins', sans-serif;\n    font-size: 1.6rem;\n    background-color: ${({ theme }) => theme.colors.light.primary};\n    color: ${({ theme }) => theme.colors.dark.primary};\n    /* Footer support */\n    margin-bottom: 5.2rem;\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    line-height: 1.2;\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  img {\n    display: block;\n    width: 100%;\n  }\n\n  button,\n  input,\n  textarea {\n    border: none;\n    outline: none;\n    color: inherit;\n    font-family: inherit;\n    font-size: inherit;\n  }\n\n  button {\n    cursor: pointer;\n  }\n\n  @media (max-width: 1600px) {\n    html {\n      font-size: 55%;\n    }\n  }\n\n  @media (max-width: 1400px) {\n    html {\n      font-size: 45%;\n    }\n  }\n`\nexport default GlobalStyle\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { ThemeProvider } from 'styled-components'\nimport Theme from './theme/Theme'\nimport GlobalStyle from './theme/GlobalStyle'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={Theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}